{"version":3,"file":"MicrosoftAuth.js","sourceRoot":"/","sources":["MicrosoftAuth.ts"],"names":[],"mappings":"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","sourcesContent":["import * as process from \"node:process\";\r\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport * as qs from \"qs\";\r\nimport * as XboxLiveAuth from \"@xboxreplay/xboxlive-auth\"\r\nimport { XBLExchangeTokensResponse } from \"@xboxreplay/xboxlive-auth\"\r\nimport {\r\n    MicrosoftAuthInfo,\r\n    MicrosoftIdentities, MicrosoftOauthResult,\r\n    XboxInfo,\r\n    XboxLoginResponse,\r\n    XSTSResponse\r\n} from \"@mineskin/types\";\r\nimport { RequestHandlers } from \"./types/RequestHandler\";\r\nimport { MSAError } from \"./MSAError\";\r\nimport { epochSeconds, toEpochSeconds } from \"./util\";\r\nimport winston from \"winston\";\r\nimport * as Sentry from \"@sentry/node\";\r\n\r\nconst MC_XSTSRelyingParty = 'rp://api.minecraftservices.com/'\r\nconst XBOX_XSTSRelyingParty = 'http://xboxlive.com'\r\n\r\n// manage app on portal.azure.com\r\nexport class MicrosoftAuth {\r\n\r\n    static logger: winston.Logger = winston.createLogger();\r\n\r\n    constructor(\r\n        private readonly requestHandlers: RequestHandlers<'generic' | 'liveLogin' | 'minecraftServices'>,\r\n        private readonly redirectUri: string = process.env.MSA_REDIRECT_URI,\r\n    ) {\r\n    }\r\n\r\n    public async newOAuthRedirect(\r\n        scopes: string[],\r\n        state: string,\r\n        loginHint: string\r\n    ) {\r\n        const scope = scopes.join(\"%20\");\r\n        return 'https://login.live.com/oauth20_authorize.srf?' +\r\n            `client_id=${ process.env.MSA_CLIENT_ID }` +\r\n            '&response_type=code' +\r\n            `&redirect_uri=${ this.redirectUri }` +\r\n            `&scope=${ scope }` +\r\n            `&state=${ state }` +\r\n            '&prompt=login&' +\r\n            `login_hint=${ loginHint }`;\r\n    }\r\n\r\n    public async loginWithXboxCode(code: string): Promise<XboxInfo> {\r\n        return await Sentry.startSpan({\r\n            op: 'auth',\r\n            name: 'loginWithXboxCode'\r\n        }, async () => {\r\n            MicrosoftAuth.logger.debug(\"loginWithXboxCode\")\r\n            const form = {\r\n                \"client_id\": process.env.MSA_CLIENT_ID,\r\n                \"client_secret\": process.env.MSA_CLIENT_SECRET,\r\n                \"code\": code,\r\n                \"grant_type\": \"authorization_code\",\r\n                \"redirect_uri\": this.redirectUri\r\n            }\r\n            return await this.authenticateXboxLiveWithFormData(form);\r\n        });\r\n    }\r\n\r\n    async exchangeRpsTicketForIdentities(rpsTicket: string): Promise<MicrosoftIdentities & {\r\n        token: XBLExchangeTokensResponse\r\n    }> {\r\n        return await Sentry.startSpan({\r\n            op: 'auth',\r\n            name: 'exchangeRpsTicketForIdentities'\r\n        }, async () => {\r\n            MicrosoftAuth.logger.debug(\"exchangeRpsTicketForIdentities\")\r\n            if (!rpsTicket.startsWith(\"d=\")) {\r\n                // username+password login doesn't seem to need this prefix, code auth does\r\n                rpsTicket = `d=${ rpsTicket }`;\r\n            }\r\n            let userTokenResponse: XBLExchangeTokensResponse = await Sentry.startSpan({\r\n                op: 'xbl',\r\n                name: 'exchangeRpsTicketForUserToken'\r\n            }, async () => {\r\n                // https://user.auth.xboxlive.com/user/authenticate\r\n                try {\r\n                    return await XboxLiveAuth.xbl.exchangeRpsTicketForUserToken(rpsTicket);\r\n                } catch (e) {\r\n                    Sentry.captureException(e, {\r\n                        tags: {\r\n                            stage: 'exchangeRpsTicketForIdentities'\r\n                        }\r\n                    });\r\n                    throw new MSAError('exchangeRpsTicketForIdentities', e);\r\n                }\r\n            });\r\n            // console.log(\"exchangeRpsTicket\")\r\n            // console.log(JSON.stringify(userTokenResponse))\r\n            return {\r\n                token: userTokenResponse,\r\n                mc: await this.getIdentityForRelyingParty(userTokenResponse, MC_XSTSRelyingParty),\r\n                xbox: await this.getIdentityForRelyingParty(userTokenResponse, XBOX_XSTSRelyingParty)\r\n            };\r\n        });\r\n    }\r\n\r\n    async getIdentityForRelyingParty(userTokenResponse: XBLExchangeTokensResponse, relyingParty: string): Promise<XSTSResponse> {\r\n        return await Sentry.startSpan({\r\n            op: 'auth',\r\n            name: 'getIdentityForRelyingParty'\r\n        }, async () => {\r\n            MicrosoftAuth.logger.debug(\"getIdentityForRelyingParty\")\r\n            // https://xsts.auth.xboxlive.com/xsts/authorize\r\n            const body = {\r\n                RelyingParty: relyingParty,\r\n                TokenType: \"JWT\",\r\n                Properties: {\r\n                    SandboxId: \"RETAIL\",\r\n                    UserTokens: [userTokenResponse.Token]\r\n                }\r\n            };\r\n            let authResponse: AxiosRequestConfig;\r\n            try {\r\n                authResponse = await this.requestHandlers.generic({\r\n                    method: \"POST\",\r\n                    url: \"https://xsts.auth.xboxlive.com/xsts/authorize\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Accept\": \"application/json\",\r\n                        /*\"x-xbl-contract-version\": 1*/\r\n                    },\r\n                    data: body\r\n                });\r\n            } catch (e) {\r\n                Sentry.captureException(e, {\r\n                    tags: {\r\n                        stage: 'getIdentityForRelyingParty'\r\n                    }\r\n                });\r\n                throw new MSAError('getIdentityForRelyingParty', e);\r\n            }\r\n            return authResponse.data as XSTSResponse;\r\n        });\r\n    }\r\n\r\n    private async authenticateXboxLiveWithFormData(form: any): Promise<XboxInfo> {\r\n        return await Sentry.startSpan({\r\n            op: 'auth',\r\n            name: 'authenticateXboxLiveWithFormData'\r\n        }, async () => {\r\n            MicrosoftAuth.logger.debug(\"authenticateXboxLiveWithFormData\")\r\n            let refreshResponse: AxiosResponse;\r\n            try {\r\n                refreshResponse = await this.requestHandlers.liveLogin({\r\n                    method: \"POST\",\r\n                    url: \"https://login.live.com/oauth20_token.srf\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                        \"Accept\": \"application/json\"\r\n                    },\r\n                    data: qs.stringify(form)\r\n                });\r\n            } catch (e) {\r\n                Sentry.captureException(e, {\r\n                    tags: {\r\n                        stage: 'authenticateXboxLiveWithFormData'\r\n                    }\r\n                });\r\n                throw new MSAError('authenticateXboxWithFormData', e);\r\n            }\r\n            const refreshBody = refreshResponse.data;\r\n            // console.log(\"refreshBody\");\r\n            // console.log(JSON.stringify(refreshBody))\r\n\r\n            // Microsoft/Xbox accessToken\r\n            const xboxAccessToken = refreshBody[\"access_token\"];\r\n            const xboxRefreshToken = refreshBody[\"refresh_token\"];\r\n\r\n            const identityResponses = await this.exchangeRpsTicketForIdentities(xboxAccessToken);\r\n            // console.log(\"identities\");\r\n            // console.log(identityResponses)\r\n            const mcIdentity = identityResponses.mc;\r\n            const xboxIdentity = identityResponses.xbox;\r\n\r\n            const userHash = mcIdentity.DisplayClaims.xui[0].uhs;\r\n            const XSTSToken = mcIdentity.Token;\r\n\r\n            const xboxLoginResponse = await this.loginToMinecraftWithXbox(userHash, XSTSToken);\r\n            const minecraftXboxUsername = xboxLoginResponse.username;\r\n\r\n            return {\r\n                // Minecraft accessToken - does not return a refresh token, so need the MS one above\r\n                mcAccessToken: xboxLoginResponse.access_token,\r\n                msa: {\r\n                    auth: {\r\n                        accessToken: xboxAccessToken,\r\n                        refreshToken: xboxRefreshToken,\r\n                        expires: epochSeconds() + parseInt(refreshBody[\"expires_in\"]),\r\n                        issued: epochSeconds(),\r\n                        userId: refreshBody[\"user_id\"]\r\n                    },\r\n                    userToken: {\r\n                        token: identityResponses.token.Token,\r\n                        expires: toEpochSeconds(Date.parse(identityResponses.token.NotAfter)),\r\n                        issued: toEpochSeconds(Date.parse(identityResponses.token.IssueInstant)),\r\n                        userHash: identityResponses.token.DisplayClaims.xui[0].uhs\r\n                    },\r\n                    identities: {\r\n                        mc: {\r\n                            token: mcIdentity.Token,\r\n                            expires: toEpochSeconds(Date.parse(mcIdentity.NotAfter)),\r\n                            issued: toEpochSeconds(Date.parse(mcIdentity.IssueInstant)),\r\n                            claims: mcIdentity.DisplayClaims.xui[0]\r\n                        },\r\n                        xbox: {\r\n                            token: xboxIdentity.Token,\r\n                            expires: toEpochSeconds(Date.parse(xboxIdentity.NotAfter)),\r\n                            issued: toEpochSeconds(Date.parse(xboxIdentity.IssueInstant)),\r\n                            claims: xboxIdentity.DisplayClaims.xui[0]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private async loginToMinecraftWithXbox(userHash: string, xstsToken: string): Promise<XboxLoginResponse> {\r\n        return await Sentry.startSpan({\r\n            op: 'auth',\r\n            name: 'loginToMinecraftWithXbox'\r\n        }, async () => {\r\n            MicrosoftAuth.logger.debug(\"loginToMinecraftWithXbox\")\r\n            const body = {\r\n                identityToken: `XBL3.0 x=${ userHash };${ xstsToken }`\r\n            };\r\n            let xboxLoginResponse: AxiosResponse;\r\n            try {\r\n                xboxLoginResponse = await this.requestHandlers.minecraftServices({\r\n                    method: \"POST\",\r\n                    url: \"https://api.minecraftservices.com/authentication/login_with_xbox\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Accept\": \"application/json\"\r\n                    },\r\n                    data: body\r\n                });\r\n            } catch (e) {\r\n                Sentry.captureException(e, {\r\n                    tags: {\r\n                        stage: 'loginToMinecraftWithXbox'\r\n                    }\r\n                });\r\n                throw new MSAError('loginToMinecraftWithXbox', e);\r\n            }\r\n            const xboxLoginBody = xboxLoginResponse.data;\r\n            // console.log(\"xboxLogin\")\r\n            // console.log(JSON.stringify(xboxLoginBody));\r\n            return xboxLoginBody as XboxLoginResponse;\r\n        });\r\n    }\r\n\r\n\r\n    async refreshXboxAccessToken(xboxRefreshToken: string): Promise<XboxInfo> {\r\n        return await Sentry.startSpan({\r\n            op: 'auth',\r\n            name: 'refreshXboxAccessToken'\r\n        }, async () => {\r\n            MicrosoftAuth.logger.debug(\"refreshXboxAccessToken\");\r\n            const form = {\r\n                \"client_id\": process.env.MSA_CLIENT_ID,\r\n                \"client_secret\": process.env.MSA_CLIENT_SECRET,\r\n                \"refresh_token\": xboxRefreshToken,\r\n                \"grant_type\": \"refresh_token\",\r\n                \"redirect_uri\": this.redirectUri\r\n            }\r\n            return await this.authenticateXboxLiveWithFormData(form);\r\n        });\r\n    }\r\n\r\n}\r\n"]}