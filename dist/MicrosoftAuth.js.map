{"version":3,"file":"MicrosoftAuth.js","sourceRoot":"/","sources":["MicrosoftAuth.ts"],"names":[],"mappings":"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","sourcesContent":["import * as process from \"node:process\";\r\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport * as qs from \"qs\";\r\nimport * as XboxLiveAuth from \"@xboxreplay/xboxlive-auth\"\r\nimport { XBLExchangeTokensResponse } from \"@xboxreplay/xboxlive-auth\"\r\nimport {\r\n    MicrosoftAuthInfo,\r\n    MicrosoftIdentities, MicrosoftOauthResult,\r\n    XboxInfo,\r\n    XboxLoginResponse,\r\n    XSTSResponse\r\n} from \"./types/MicrosoftAuthInfo\";\r\nimport { RequestHandlers } from \"./types/RequestHandler\";\r\nimport { MSAError } from \"./MSAError\";\r\nimport { epochSeconds, toEpochSeconds } from \"./util\";\r\nimport winston from \"winston\";\r\n\r\nconst MC_XSTSRelyingParty = 'rp://api.minecraftservices.com/'\r\nconst XBOX_XSTSRelyingParty = 'http://xboxlive.com'\r\n\r\n// manage app on portal.azure.com\r\nexport class MicrosoftAuth {\r\n\r\n    static logger: winston.Logger = winston.createLogger();\r\n\r\n    constructor(\r\n        private readonly requestHandlers: RequestHandlers<'generic' | 'liveLogin' | 'minecraftServices'>,\r\n        private readonly redirectUri: string = process.env.MSA_REDIRECT_URI,\r\n    ) {\r\n    }\r\n\r\n    public async newOAuthRedirect(\r\n        scopes: string[],\r\n        state: string,\r\n        loginHint: string\r\n    ) {\r\n        const scope = scopes.join(\"%20\");\r\n        return 'https://login.live.com/oauth20_authorize.srf?' +\r\n            `client_id=${ process.env.MSA_CLIENT_ID }` +\r\n            '&response_type=code' +\r\n            `&redirect_uri=${ this.redirectUri }` +\r\n            `&scope=${ scope }` +\r\n            `&state=${ state }` +\r\n            '&prompt=login&' +\r\n            `login_hint=${ loginHint }`;\r\n    }\r\n\r\n    public async loginWithXboxCode(code: string): Promise<XboxInfo> {\r\n        MicrosoftAuth.logger.debug(\"loginWithXboxCode\")\r\n        const form = {\r\n            \"client_id\": process.env.MSA_CLIENT_ID,\r\n            \"client_secret\": process.env.MSA_CLIENT_SECRET,\r\n            \"code\": code,\r\n            \"grant_type\": \"authorization_code\",\r\n            \"redirect_uri\": this.redirectUri\r\n        }\r\n        return await this.authenticateXboxLiveWithFormData(form);\r\n    }\r\n\r\n    async exchangeRpsTicketForIdentities(rpsTicket: string): Promise<MicrosoftIdentities & {\r\n        token: XBLExchangeTokensResponse\r\n    }> {\r\n        MicrosoftAuth.logger.debug(\"exchangeRpsTicketForIdentities\")\r\n        if (!rpsTicket.startsWith(\"d=\")) {\r\n            // username+password login doesn't seem to need this prefix, code auth does\r\n            rpsTicket = `d=${ rpsTicket }`;\r\n        }\r\n        // https://user.auth.xboxlive.com/user/authenticate\r\n        let userTokenResponse: XBLExchangeTokensResponse;\r\n        try {\r\n            userTokenResponse = await XboxLiveAuth.xbl.exchangeRpsTicketForUserToken(rpsTicket);\r\n        } catch (e) {\r\n            throw new MSAError('exchangeRpsTicketForIdentities', e);\r\n        }\r\n        // console.log(\"exchangeRpsTicket\")\r\n        // console.log(JSON.stringify(userTokenResponse))\r\n        return {\r\n            token: userTokenResponse,\r\n            mc: await this.getIdentityForRelyingParty(userTokenResponse, MC_XSTSRelyingParty),\r\n            xbox: await this.getIdentityForRelyingParty(userTokenResponse, XBOX_XSTSRelyingParty)\r\n        };\r\n    }\r\n\r\n    async getIdentityForRelyingParty(userTokenResponse: XBLExchangeTokensResponse, relyingParty: string): Promise<XSTSResponse> {\r\n        MicrosoftAuth.logger.debug(\"getIdentityForRelyingParty\")\r\n        // https://xsts.auth.xboxlive.com/xsts/authorize\r\n        const body = {\r\n            RelyingParty: relyingParty,\r\n            TokenType: \"JWT\",\r\n            Properties: {\r\n                SandboxId: \"RETAIL\",\r\n                UserTokens: [userTokenResponse.Token]\r\n            }\r\n        };\r\n        let authResponse: AxiosRequestConfig;\r\n        try {\r\n            authResponse = await this.requestHandlers.generic({\r\n                method: \"POST\",\r\n                url: \"https://xsts.auth.xboxlive.com/xsts/authorize\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Accept\": \"application/json\",\r\n                    /*\"x-xbl-contract-version\": 1*/\r\n                },\r\n                data: body\r\n            });\r\n        } catch (e) {\r\n            throw new MSAError('getIdentityForRelyingParty', e);\r\n        }\r\n        return authResponse.data as XSTSResponse\r\n    }\r\n\r\n    private async authenticateXboxLiveWithFormData(form: any): Promise<XboxInfo> {\r\n        MicrosoftAuth.logger.debug(\"authenticateXboxLiveWithFormData\")\r\n        let refreshResponse: AxiosResponse;\r\n        try {\r\n            refreshResponse = await this.requestHandlers.liveLogin({\r\n                method: \"POST\",\r\n                url: \"https://login.live.com/oauth20_token.srf\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                    \"Accept\": \"application/json\"\r\n                },\r\n                data: qs.stringify(form)\r\n            });\r\n        } catch (e) {\r\n            throw new MSAError('authenticateXboxWithFormData', e);\r\n        }\r\n        const refreshBody = refreshResponse.data;\r\n        // console.log(\"refreshBody\");\r\n        // console.log(JSON.stringify(refreshBody))\r\n\r\n        // Microsoft/Xbox accessToken\r\n        const xboxAccessToken = refreshBody[\"access_token\"];\r\n        const xboxRefreshToken = refreshBody[\"refresh_token\"];\r\n\r\n        const identityResponses = await this.exchangeRpsTicketForIdentities(xboxAccessToken);\r\n        // console.log(\"identities\");\r\n        // console.log(identityResponses)\r\n        const mcIdentity = identityResponses.mc;\r\n        const xboxIdentity = identityResponses.xbox;\r\n\r\n        const userHash = mcIdentity.DisplayClaims.xui[0].uhs;\r\n        const XSTSToken = mcIdentity.Token;\r\n\r\n        const xboxLoginResponse = await this.loginToMinecraftWithXbox(userHash, XSTSToken);\r\n        const minecraftXboxUsername = xboxLoginResponse.username;\r\n\r\n        return {\r\n            // Minecraft accessToken - does not return a refresh token, so need the MS one above\r\n            mcAccessToken: xboxLoginResponse.access_token,\r\n            msa: {\r\n                auth: {\r\n                    accessToken: xboxAccessToken,\r\n                    refreshToken: xboxRefreshToken,\r\n                    expires: epochSeconds() + parseInt(refreshBody[\"expires_in\"]),\r\n                    issued: epochSeconds(),\r\n                    userId: refreshBody[\"user_id\"]\r\n                },\r\n                userToken: {\r\n                    token: identityResponses.token.Token,\r\n                    expires: toEpochSeconds(Date.parse(identityResponses.token.NotAfter)),\r\n                    issued: toEpochSeconds(Date.parse(identityResponses.token.IssueInstant)),\r\n                    userHash: identityResponses.token.DisplayClaims.xui[0].uhs\r\n                },\r\n                identities: {\r\n                    mc: {\r\n                        token: mcIdentity.Token,\r\n                        expires: toEpochSeconds(Date.parse(mcIdentity.NotAfter)),\r\n                        issued: toEpochSeconds(Date.parse(mcIdentity.IssueInstant)),\r\n                        claims: mcIdentity.DisplayClaims.xui[0]\r\n                    },\r\n                    xbox: {\r\n                        token: xboxIdentity.Token,\r\n                        expires: toEpochSeconds(Date.parse(xboxIdentity.NotAfter)),\r\n                        issued: toEpochSeconds(Date.parse(xboxIdentity.IssueInstant)),\r\n                        claims: xboxIdentity.DisplayClaims.xui[0]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async loginToMinecraftWithXbox(userHash: string, xstsToken: string): Promise<XboxLoginResponse> {\r\n        MicrosoftAuth.logger.debug(\"loginToMinecraftWithXbox\")\r\n        const body = {\r\n            identityToken: `XBL3.0 x=${ userHash };${ xstsToken }`\r\n        };\r\n        let xboxLoginResponse: AxiosResponse;\r\n        try {\r\n            xboxLoginResponse = await this.requestHandlers.minecraftServices({\r\n                method: \"POST\",\r\n                url: \"https://api.minecraftservices.com/authentication/login_with_xbox\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Accept\": \"application/json\"\r\n                },\r\n                data: body\r\n            });\r\n        } catch (e) {\r\n            throw new MSAError('loginToMinecraftWithXbox', e);\r\n        }\r\n        const xboxLoginBody = xboxLoginResponse.data;\r\n        // console.log(\"xboxLogin\")\r\n        // console.log(JSON.stringify(xboxLoginBody));\r\n        return xboxLoginBody as XboxLoginResponse;\r\n    }\r\n\r\n\r\n    async refreshXboxAccessToken(xboxRefreshToken: string): Promise<XboxInfo> {\r\n        MicrosoftAuth.logger.debug(\"refreshXboxAccessToken\");\r\n        const form = {\r\n            \"client_id\": process.env.MSA_CLIENT_ID,\r\n            \"client_secret\": process.env.MSA_CLIENT_SECRET,\r\n            \"refresh_token\": xboxRefreshToken,\r\n            \"grant_type\": \"refresh_token\",\r\n            \"redirect_uri\": this.redirectUri\r\n        }\r\n        return await this.authenticateXboxLiveWithFormData(form);\r\n    }\r\n\r\n}\r\n"]}